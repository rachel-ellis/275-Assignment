Name: Anushka Khare and Rachel Ellis
ID: 1617774 and 1618966
CMPUT 275 Winter 2021
Assignment 1 â€” Trivial Navigation System


We did the Assignment with some help from TAs during office hours but other than that we received no other help.

Included Files:
	Makefile 
	README
	digraph.h
	digraph.cpp
	server.cpp
	heap.h
	dijkstra.cpp
	dijkstra.h


Makefile Targets:
- make server: Builds the project
- make server.o: Compiles the object for server.cpp
- make dijkstra.o: Compiles the object for dijkstra.cpp
- make digraph.o: Compiles the object for digraph.cpp
- make clean: Removes all object files and executables

Running Instructions:
	1. Write make server (or just make since it is the main target) in the terimal to compile this program into the exectuable 'server'. The user can choose to call the excutable and then use the proper pipleline to receive input from the appropriate input file and redirect the output to appropriate output file instead of just entering/getting input and output directly in the terminal.
	2. Call make clean to remove all object files and the executable


Notes and Assumptions: 

	This program contains Makefile, README, digraph.h, digraph.cpp, server.cpp, heap.h, dijkstra.cpp, dijkstra.h. Note, the digraph.h and dijkstra.h files were unmodified. 

	In the server.cpp file the readGraph and manhattan functions were implemented. The readGraph method input is read in and loaded into. The vertice's ID is lined with the longitude and latitude. An object of Wdiagraph is created which is basically a directed graph (in this case) with a weight or cost (the distance) associated with each edge. Finally, the manhattan function calculates the cost between 2 different Points using the manhattan distance formula provided. 

	In dijkstra.cpp we implemented the dijkstra function which calulated the path with the least cost from a given start point. This was done in a time efficent manner by using a binary heap object to find the next waypoint with the minimum cost associated with it. Lastly, in heap.h we implemented binary heap class through the popMin, insert, size,  fixHeapUp and fixHeapDown functions. 

	To ensure that the purpose of the assignment was accomplished we then implemented the main fucntion in the server.cpp and appropriately called the functions listed above. This program assumes that the input user will correctly call the Makefile targets as listed above and will clear the object files prior to every execution. Futhermore, when presented with input points that are  not present on the edmonton graph, we have implemented the manhantan function to calculate the closest vertex to the given point. 

	In heap.h we also assume that the user will not call min or minPop on an empty binary heap. We also assumed that the user will provide input in the specified way (eg. single spaces between different values on a line to make parsing easier).
